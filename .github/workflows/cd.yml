name: Deploy to EC2 with ECR
#이미 도커파일이 이미지화되어 넘어감-> 자꾸 없다고 컴포즈 파일 없다고 뜸.
on:
  push:
    branches:
      - feat/seperate
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # AWS에 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if S3 credentials are set
        run: |
          if [[ -z "${{ secrets.S3_ACCESS_KEY }}" ]] || [[ -z "${{ secrets.S3_SECRET_ACCESS_KEY }}" ]]; then
            echo "S3 credentials are not set."
            exit 1
          else
            echo "S3 credentials are set."
          fi

      # ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Docker 이미지 빌드 및 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: trello
          IMAGE_TAG: latest
          SOCKET_IO_PORT: 4000
          PORT: 3000
          DATABASE_URL:  ${{ secrets.DATABASE_URL}}
          DATABASE_HOST :  ${{ secrets.DATABASE_HOST}}
          DATABASE_PORT :  ${{ secrets.DATABASE_PORT}}
          DATABASE_NAME : ${{ secrets.DATABASE_NAME}}
          DATABASE_USERNAME : ${{ secrets.DATABASE_USERNAME}}
          DATABASE_PASSWORD : ${{ secrets.DATABASE_PASSWORD}}
          JWT_SECRET : ${{ secrets.JWT_SECRET}}
          S3_ACCESS_KEY : ${{ secrets.S3_ACCESS_KEY}}
          S3_SECRET_ACCESS_KEY :  ${{ secrets.S3_SECRET_ACCESS_KEY}}
          REDIS_HOST : ${{ secrets.REDIS_HOST}}
          REDIS_PORT : ${{ secrets.REDIS_PORT}}
          REDIS_PASSWORD : ${{ secrets.REDIS_PASSWORD}}
          GOOGLE_ID :  ${{ secrets.GOOGLE_ID}}
          GOOGLE_SECRET : ${{ secrets.GOOGLE_SECRET}}
          USER : ${{ secrets.USER}}
          PASS : ${{ secrets.PASS}}!
          AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION : ${{ secrets.AWS_REGION}}
          REMOTE_PRIVATE_KEY : ${{ secrets.REMOTE_PRIVATE_KEY}}
          EC2_HOST : ${{ secrets.EC2_HOST}}
          EC2_USERNAME : ${{ secrets.EC2_USERNAME}}


        run: |
          docker-compose build
          docker-compose push

      # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작
      - name: SSH into EC2 instance and restart Docker container
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker-compose down
            docker-compose pull'
            sudp docker run ${ECR_REGISTRY}/trello:late
            sudo docker run ${ECR_REGISTRY}/trello:latest
            docker-compose up -d
            docker system prune -af
